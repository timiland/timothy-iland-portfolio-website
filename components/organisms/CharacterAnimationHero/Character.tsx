/* eslint-disable react/no-unknown-property */
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 public/Character.glb --types
*/

import * as THREE from 'three';
import React, { useRef, useEffect, useMemo } from 'react';
import { useGLTF, useAnimations, Clone } from '@react-three/drei';
import { GLTF, SkeletonUtils } from 'three-stdlib';
import { useGraph } from '@react-three/fiber';
import { AnimationClip, AnimationObjectGroup } from 'three';

interface props {
  readonly model: string;
  readonly actionIndex: number;
}

type GLTFResult = GLTF & {
  nodes: {
    Character: THREE.SkinnedMesh;
    mixamorigHips: THREE.Bone;
  };
};

type ActionName = 'Armature|mixamo.com|Layer0' | 'danceAnimation';
type GLTFActions = Record<ActionName, THREE.AnimationAction>;

const Character = ({ model, actionIndex }: props) => {
  const group = useRef<THREE.Group>();
  const { scene, animations } = useGLTF(model) as GLTFResult;
  const { ref, actions, names } = useAnimations<AnimationClip>(
    animations,
    group
  );

  // Skinned meshes cannot be re-used in threejs without cloning them
  const clone = useMemo(() => SkeletonUtils.clone(scene), [scene]);
  // useGraph creates two flat object collections for nodes and materials
  const { nodes } = useGraph(clone);

  console.log({ scene }, { nodes }, { animations });

  const meshes = nodes;

  // Change animation when the index changes
  useEffect(() => {
    // Reset and fade in animation after an index has been changed
    actions[`${names[actionIndex]}`]?.reset().fadeIn(0.5).play();
    // In the clean-up phase, fade it out
    return () => actions[`${names[actionIndex]}`]?.fadeOut(0.5);
  }, [actions, actionIndex, names]);

  useGLTF.preload(model);

  return (
    <group ref={group} dispose={null}>
      <group name="Scene">
        <group
          name="Armature"
          scale={[2.5, 2.5, 2.5]}
          position={[0, -7, 0]}
          rotation={[Math.PI / 2, 0, 0]}
        >
          <primitive object={nodes.mixamorigHips} />
          {/* <Clone object={nodes.Dovman} />; */}
          <skinnedMesh
            name="Dovman"
            geometry={nodes.ARMS_Cube021.geometry}
            material={nodes.ARMS_Cube021.material}
            skeleton={nodes.ARMS_Cube021.skeleton}
          />
          <skinnedMesh
            name="Dovman"
            geometry={nodes.TSHIRT_Cube018mesh001_1.geometry}
            material={nodes.TSHIRT_Cube018mesh001_1.material}
            skeleton={nodes.TSHIRT_Cube018mesh001_1.skeleton}
          />
          <skinnedMesh
            name="Dovman"
            geometry={nodes.TROUSERS_Cube002mesh001_1.geometry}
            material={nodes.TROUSERS_Cube002mesh001_1.material}
            skeleton={nodes.TROUSERS_Cube002mesh001_1.skeleton}
          />
          <skinnedMesh
            name="Dovman"
            geometry={nodes.FEET_Cube020mesh001_2.geometry}
            material={nodes.FEET_Cube020mesh001_2.material}
            skeleton={nodes.FEET_Cube020mesh001_2.skeleton}
          />
          <skinnedMesh
            name="Dovman"
            geometry={nodes.FEET_Cube020mesh001_1.geometry}
            material={nodes.FEET_Cube020mesh001_1.material}
            skeleton={nodes.FEET_Cube020mesh001_1.skeleton}
          />
          <skinnedMesh
            name="Dovman"
            geometry={nodes.FEET_Cube020mesh001.geometry}
            material={nodes.FEET_Cube020mesh001.material}
            skeleton={nodes.FEET_Cube020mesh001.skeleton}
          />
          <skinnedMesh
            name="Dovman"
            geometry={nodes.TROUSERS_Cube002mesh001.geometry}
            material={nodes.TROUSERS_Cube002mesh001.material}
            skeleton={nodes.TROUSERS_Cube002mesh001.skeleton}
          />
          <skinnedMesh
            name="Dovman"
            geometry={nodes.HEAD_Cube022.geometry}
            material={nodes.HEAD_Cube022.material}
            skeleton={nodes.HEAD_Cube022.skeleton}
          />
          <skinnedMesh
            name="Dovman"
            geometry={nodes.TSHIRT_Cube018mesh001.geometry}
            material={nodes.TSHIRT_Cube018mesh001.material}
            skeleton={nodes.TSHIRT_Cube018mesh001.skeleton}
          >
            <meshBasicMaterial color="#FDC628" />
          </skinnedMesh>
          <skinnedMesh
            name="Dovman"
            geometry={nodes.HAT_Cube023mesh001.geometry}
            material={nodes.HAT_Cube023mesh001.material}
            skeleton={nodes.HAT_Cube023mesh001.skeleton}
          >
            <meshBasicMaterial color="#06050D" />
          </skinnedMesh>
          <skinnedMesh
            name="Dovman"
            geometry={nodes.HAT_Cube023mesh001_1.geometry}
            material={nodes.HAT_Cube023mesh001_1.material}
            skeleton={nodes.HAT_Cube023mesh001_1.skeleton}
          />
        </group>
      </group>
    </group>
  );
};

export default Character;
