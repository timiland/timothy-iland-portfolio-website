/* eslint-disable react/no-unknown-property */
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 public/Character.glb --types
*/

import * as THREE from 'three';
import React, { useRef, useEffect, useMemo } from 'react';
import { useGLTF, useAnimations } from '@react-three/drei';
import { GLTF, SkeletonUtils } from 'three-stdlib';
import { useGraph } from '@react-three/fiber';
import { AnimationClip, MeshStandardMaterial } from 'three';

interface props {
  readonly model: string;
  readonly actionIndex: number;
  readonly colourIndex: number;
}

type GLTFResult = GLTF & {
  nodes: THREE.SkinnedMesh;
};

type CharacterNodes = {
  ARMS: THREE.SkinnedMesh;
  HEAD: THREE.SkinnedMesh;
  HAIR: THREE.SkinnedMesh;
  FEET_1: THREE.SkinnedMesh;
  FEET_2: THREE.SkinnedMesh;
  TROUSERS_1: THREE.SkinnedMesh;
  TROUSERS_2: THREE.SkinnedMesh;
  TSHIRT_1: THREE.SkinnedMesh;
  TSHIRT_2: THREE.SkinnedMesh;
  HAT_1: THREE.SkinnedMesh;
  HAT_2: THREE.SkinnedMesh;
};

const Character = ({ model, actionIndex, colourIndex }: props) => {
  const group = useRef<THREE.Group>(null);
  const { scene, animations } = useGLTF(model) as GLTFResult;
  const { actions, names } = useAnimations<AnimationClip>(animations, group);

  // Skinned meshes cannot be re-used in threejs without cloning them
  const clone = useMemo(() => SkeletonUtils.clone(scene), [scene]);
  // useGraph creates two flat object collections for nodes and materials
  const { nodes } = useGraph(clone);

  const {
    ARMS,
    HEAD,
    HAIR,
    FEET_1,
    FEET_2,
    TROUSERS_1,
    TROUSERS_2,
    TSHIRT_1,
    TSHIRT_2,
    HAT_1,
    HAT_2,
  } = nodes as CharacterNodes;

  // Change animation when the index changes
  useEffect(() => {
    // Reset and fade in animation after an index has been changed
    actions[`${names[actionIndex]}`]?.reset().fadeIn(0.5).play();
    // In the clean-up phase, fade it out
    return () => {
      actions[`${names[actionIndex]}`]?.fadeOut(0.5);
    };
  }, [actions, actionIndex, names]);

  useGLTF.preload(model);

  const green = new MeshStandardMaterial({
    color: 0x008b45,
  });
  const black = new MeshStandardMaterial({
    color: 0x06050d,
  });
  const yellow = new MeshStandardMaterial({
    color: 0xffde17,
  });
  const white = new MeshStandardMaterial({
    color: 0xffffff,
  });

  const coloursObj = [
    { trims: yellow, base: green, trousers: green },
    { trims: yellow, base: black, trousers: yellow },
    { trims: black, base: white, trousers: white },
  ];

  return (
    <group ref={group} dispose={null}>
      <group name="Scene">
        <group
          name="Armature"
          scale={[0.08, 0.08, 0.08]}
          position={[0, -25, -10]}
          rotation={[Math.PI / 2, 0, 0]}
        >
          <primitive object={nodes.mixamorigHips} />
          <skinnedMesh
            name="Arms"
            geometry={ARMS.geometry}
            material={ARMS.material}
            skeleton={ARMS.skeleton}
          />
          <skinnedMesh
            name="Head"
            geometry={HEAD.geometry}
            material={HEAD.material}
            skeleton={HEAD.skeleton}
          />
          <skinnedMesh
            name="Hair"
            geometry={HAIR.geometry}
            material={HAIR.material}
            skeleton={HAIR.skeleton}
          />
          <skinnedMesh
            name="Feet Laces / Sole"
            geometry={FEET_1.geometry}
            material={white}
            skeleton={FEET_1.skeleton}
          />
          <skinnedMesh
            name="Feet Material"
            geometry={FEET_2.geometry}
            material={black}
            skeleton={FEET_2.skeleton}
          />
          <skinnedMesh
            name="Hat Base"
            geometry={HAT_1.geometry}
            material={coloursObj[colourIndex].base}
            skeleton={HAT_1.skeleton}
          />
          <skinnedMesh
            name="Hat Trim"
            geometry={HAT_2.geometry}
            material={coloursObj[colourIndex].trims}
            skeleton={HAT_2.skeleton}
          />
          <skinnedMesh
            name="Trouser Base"
            geometry={TROUSERS_1.geometry}
            material={coloursObj[colourIndex].trousers}
            skeleton={TROUSERS_1.skeleton}
          />
          <skinnedMesh
            name="Trouser Trim"
            geometry={TROUSERS_2.geometry}
            material={coloursObj[colourIndex].trims}
            skeleton={TROUSERS_2.skeleton}
          />
          <skinnedMesh
            name="Tshirt Base"
            geometry={TSHIRT_1.geometry}
            material={coloursObj[colourIndex].base}
            skeleton={TSHIRT_1.skeleton}
          />
          <skinnedMesh
            name="Tshirt Trim"
            geometry={TSHIRT_2.geometry}
            material={coloursObj[colourIndex].trims}
            skeleton={TSHIRT_2.skeleton}
          />
        </group>
      </group>
    </group>
  );
};

export default Character;
